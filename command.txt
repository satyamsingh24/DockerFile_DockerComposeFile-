npm init -y
npm install express

Dockerize the nodejs app
FROM node:14-alpine: Uses a lightweight Node.js image.
WORKDIR: Sets the working directory inside the container.
COPY package*.json: Copies dependency files first (optimizes caching).
RUN npm install: Installs dependencies.
COPY . .: Copies the rest of the app code.
EXPOSE 3000: Declares the container’s exposed port.
CMD: Defines the command to run the app.

create .dockerignore
node_modules
npm-debug.log

Build Docker image
docker build -t node-k8s-demo .

Run it locally 
docker run -p 3000:3000 -d node-k8s-demo
-p 3000:3000: Maps host port 3000 to container port 3000.
-d: Runs in detached mode (background)
Verify at http://localhost:3000

Docker packages the app and its environment for consistency.
The layered build process optimizes caching (faster rebuilds).
.dockerignore improves efficiency by excluding unnecessary files.

Pushing the Image to Docker Hub
docker login -u dipeshlohar348@gmail.com
password: 

docker tag node-k8s-demo dipeshlohar348/node-k8s-demo:1.0
docker push dipeshlohar348/node-k8s-demo:1.0

Key Takeaways:
Docker Hub acts as a central repository for container images.
Kubernetes will pull the image from here during deployment.

Installation minikube
https://minikube.sigs.k8s.io/docs/start/?arch=%2Fmacos%2Farm64%2Fstable%2Fhomebrew

Start miikube (local kubernates)
minikube start
Creates a local Kubernetes cluster for testing.

create deployment.yaml using command
# Generate deployment.yaml (then modify as needed)
kubectl create deployment node-k8s-demo --image=dipeshlohar348/node-k8s-demo:1.0 --dry-run=client -o yaml > deployment.yaml

# Generate service.yaml (then modify as needed)
kubectl expose deployment node-k8s-demo --port=80 --target-port=3000 --type=LoadBalancer --dry-run=client -o yaml > service.yaml

--dry-run=client prevents actual deployment.
-o yaml outputs in YAML format.

kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
This tells Kubernetes to create the resources defined in the files.

✅ Store deployment.yaml and service.yaml in the project root or a k8s/ folder.
✅ Apply them with kubectl apply -f.

verification setps
kubectl get all
kubectl get deployments
kubectl get pods
kubectl get services
kubectl logs <pod-name>

get the service url with - Access the App
minikube service node-k8s-demo-service --url

Troubleshooting commands
kubectl describe deployment node-k8s-demo - check docker image name is correct or not
kubectl describe service node-k8s-demo-service


cleanup and re-deploy
# Delete everything
kubectl delete deployment node-k8s-demo
kubectl delete service node-k8s-demo-service
kubectl delete -f deployment.yaml -f service.yaml

# Re-deploy
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml

# Watch pod creation
kubectl get pods -w

kubectl get endpoints node-k8s-demo-service

